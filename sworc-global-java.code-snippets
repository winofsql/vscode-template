{
    "mysql-select": {
        "scope": "java",
        "prefix": "mysql-select",
        "body": [
            "System.out.println(\"MySQL の読み出し\");",
            "",
            "try {",
            "    // 接続 : https://dev.mysql.com/downloads/connector/j/",
            "    conn = (Connection) DriverManager.getConnection(",
            "        \"jdbc:mysql://localhost/lightbox?user=root&password=&characterEncoding=UTF-8\"",
            "    );",
            "",
            "    // ステートメント",
            "    stmt = (Statement) conn.createStatement();",
            "    // SQL 実行",
            "    rs = stmt.executeQuery(\"SELECT * FROM 社員マスタ\");",
            "",
            "    // 行を読み出す",
            "    while( rs.next() ) {",
            "        System.out.println(rs.getString(\"社員コード\"));",
            "        System.out.println(rs.getString(\"氏名\"));",
            "    }",
            "",
            "    rs.close();",
            "    stmt.close();",
            "    // 接続解除",
            "    conn.close();",
            "",
            "} catch (Exception e) {",
            "    e.printStackTrace();",
            "}",
        ],
        "description": ""
    },
    "hello-class": {
        "scope": "java",
        "prefix": "hello-class",
        "body": [
            "public class $TM_FILENAME_BASE {",
            "",
            "    public static void main(String[] args) {",
            "        print(\"${2|日本語,こんにちは,さようなら|}\");",
            "        print(\"${3:プレースホルダ}\");",
            "",
            "    }",
            "",
            "    public $TM_FILENAME_BASE() {",
            "        super();",
            "    }",
            "",
            "    private static void print(String out) {",
            "        System.out.println(out);",
            "    }",
            "",
            "}",
        ],
        "description": ""
    },
    "map-foreach-getenv": {
        "scope": "java",
        "prefix": "map-foreach-getenv",
        "body": [
            "Map<String, String> env = System.getenv();",
            "",
            "env.forEach( (key, value) -> {",
            "    String lambda_out = String.format( \"%s -> %s\", key, value );",
            "    System.out.println( lambda_out );",
            "});",
            "",
        ],
        "description": ""
    },
    "map-array-list-add-sort-getenv": {
        "scope": "java",
        "prefix": "map-array-list-add-sort-getenv",
        "body": [
            "Map<String, String> env = System.getenv();",
            "// new String[0] : 大きさの無い文字列配列",
            "// keys に新しい配列が割り当てられます",
            "String[] keys;",
            "keys = env.keySet().toArray(new String[0]);",
            "",
            "// 追加不可なリスト",
            "List<String> list = Arrays.asList(keys);",
            "",
            "// 追加可能な List へ変換",
            "ArrayList<String> arrayList = new ArrayList<String>( list );",
            "",
            "// データ追加",
            "arrayList.add(\"abc\");",
            "arrayList.add(\"ABC\");",
            "",
            "// ソート( 大文字小文字の違いを無視 )",
            "Collections.sort(arrayList, String.CASE_INSENSITIVE_ORDER);",
            "",
            "// 拡張 for",
            "String out;",
            "for( String key : arrayList ) {",
            "    out = String.format( \"%s -> %s\", key, env.get( key ) );",
            "    System.out.println( out );",
            "}",
            "",
        ],
        "description": ""
    },
    "map-array-list-getenv": {
        "scope": "java",
        "prefix": "map-array-list-getenv",
        "body": [
            "Map<String, String> env = System.getenv();",
            "// new String[0] : 大きさの無い文字列配列",
            "// keys に新しい配列が割り当てられます",
            "String[] keys;",
            "keys = env.keySet().toArray(new String[0]);",
            "// ソート",
            "Arrays.sort(keys);",
            "",
            "// 追加不可なリスト",
            "List<String> list = Arrays.asList(keys);",
            "",
            "// 拡張 for",
            "String out;",
            "for( String key : list ) {",
            "    out = String.format( \"%s -> %s\", key, env.get( key ) );",
            "    System.out.println( out );",
            "}",
            "",
            "// forEach メソッド",
            "list.forEach( (key) -> {",
            "    String lambda_out = String.format( \"%s -> %s\", key, env.get( key ) );",
            "    System.out.println( lambda_out );",
            "});",
            "",
        ],
        "description": ""
    },
    "map-array-sort-getenv": {
        "scope": "java",
        "prefix": "map-array-sort-getenv",
        "body": [
            "Map<String, String> env = System.getenv();",
            "String[] keys;",
            "// new String[0] : 大きさの無い文字列配列",
            "// keys に新しい配列が割り当てられます",
            "keys = env.keySet().toArray(new String[0]);",
            "",
            "// 配列をソート",
            "Arrays.sort(keys);",
            "",
            "// 通常 for",
            "String key_value, out;",
            "for( int i = 0; i < keys.length; i++ ) {",
            "    key_value = keys[i];",
            "    out = String.format( \"%s -> %s\", key_value, env.get( key_value ) );",
            "    System.out.println( out );",
            "}",
            "",
            "// 拡張 for",
            "for( String key_entry : keys ) {",
            "    out = String.format( \"%s -> %s\", key_entry, env.get( key_entry ) );",
            "    System.out.println( out );",
            "}",
            "",
        ],
        "description": ""
    },
    "map-it-getenv": {
        "scope": "java",
        "prefix": "map-it-getenv",
        "body": [
            "Map<String, String> env = System.getenv();",
            "Iterator<String> iterator = env.keySet().iterator();",
            "",
            "String key,out;",
            "while ( iterator.hasNext() ) {",
            "    key = iterator.next();",
            "    out = String.format( \"%s -> %s\", key, env.get( key ) );",
            "    System.out.println( out);",
            "}",
            "",
        ],
        "description": ""
    },
    "file-in-csv": {
        "scope": "java",
        "prefix": "file-in-csv",
        "body": [
            "String[] adata;",
            "String target = new File(\".\").getAbsoluteFile().getParent();",
            "target = String.format(\"%s\\\\\\\\syain.csv\", target);",
            "",
            "try {",
            "    // 開く",
            "    FileInputStream csv_file = new FileInputStream(target);",
            "    InputStreamReader charset_stream = new InputStreamReader(csv_file, \"utf-8\");",
            "    BufferedReader buffer = new BufferedReader(charset_stream);",
            "",
            "    String line_buffer;",
            "",
            "    while ( null != (line_buffer = buffer.readLine() ) ) {",
            "",
            "            adata = line_buffer.split(\",\");",
            "            System.out.print( String.format( \"%s\", adata[0] ));",
            "            int count = adata.length;",
            "            for( int i = 1; i < count; i++) {",
            "                String disp = String.format( \" , %s\", adata[i] );  ",
            "                System.out.print( disp );",
            "            }",
            "            System.out.println( );",
            "",
            "    }",
            "",
            "    // 閉じる",
            "    buffer.close();",
            "    charset_stream.close();",
            "    csv_file.close();",
            "",
            "} catch (Exception e) {",
            "    e.printStackTrace();",
            "}",
        ],
        "description": ""
    }
}