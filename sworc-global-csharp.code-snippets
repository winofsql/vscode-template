{
    "print": {
        "scope": "csharp",
        "prefix": "print",
        "body": [
            "public void ${1:print}(string message) {",
            "    System.Console.WriteLine(\\$\"DBG:{message}\");",
            "    System.Diagnostics.Debug.WriteLine(\\$\"DBG:{message}\");",
            "}",
            "",
        ],
        "description": ""
    },
    "Console.WriteLine": {
        "scope": "csharp",
        "prefix": "console-writeline",
        "body": [
            "Console.WriteLine(${TM_SELECTED_TEXT}$0);"
        ],
        "description": ""
    },
    "file-text-input-all": {
        "scope": "csharp",
        "prefix": "file-text-input-all",
        "body": [
            "Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);",
            "try",
            "{",
            "    StreamReader sr =",
            "        new StreamReader(\"$1\",",
            "            Encoding.GetEncoding(\"shift_jis\"));",
            "",
            "    //内容を一括で読み込む",
            "    Console.WriteLine(sr.ReadToEnd());",
            "",
            "    sr.Close();",
            "}",
            "catch (Exception ex)",
            "{",
            "    string error = ex.ToString();",
            "    Console.WriteLine (error);",
            "    return;",
            "}",
            "",
        ],
        "description": ""
    },
    "mysql-select": {
        "scope": "csharp",
        "prefix": "mysql-select",
        "body": [
            "OdbcConnectionStringBuilder builder = new OdbcConnectionStringBuilder();",
            "builder.Driver = \"MySQL ODBC 8.0 Unicode Driver\";",
            "",
            "// 接続用のパラメータを追加",
            "builder.Add(\"server\", \"localhost\");",
            "builder.Add(\"database\", \"lightbox\");",
            "builder.Add(\"uid\", \"root\");",
            "builder.Add(\"pwd\", \"\");",
            "",
            "// 接続の作成",
            "OdbcConnection myCon = new OdbcConnection();",
            "",
            "// MySQL の接続準備完了",
            "myCon.ConnectionString = builder.ConnectionString;",
            "",
            "// MySQL に接続",
            "myCon.Open();",
            "",
            "// SQL",
            "string myQuery = ",
            "    @\"SELECT",
            "        社員マスタ.*,",
            "        DATE_FORMAT(生年月日,'%Y-%m-%d') as 誕生日",
            "        from 社員マスタ\";",
            "",
            "// SQL実行用のオブジェクトを作成",
            "OdbcCommand myCommand = new OdbcCommand();",
            "",
            "// 実行用オブジェクトに必要な情報を与える",
            "myCommand.CommandText = myQuery;    // SQL",
            "myCommand.Connection = myCon;       // 接続",
            "",
            "// 次でする、データベースの値をもらう為のオブジェクトの変数の定義",
            "OdbcDataReader myReader;",
            "",
            "// SELECT を実行した結果を取得",
            "myReader = myCommand.ExecuteReader();",
            "",
            "// myReader からデータが読みだされる間ずっとループ",
            "while (myReader.Read())",
            "{",
            "    // 列名より列番号を取得",
            "    int index = myReader.GetOrdinal(\"氏名\");",
            "    // 列番号で、値を取得して文字列化",
            "    string text = myReader.GetValue(index).ToString();",
            "    // コンソールに出力",
            "    Console.WriteLine(text);",
            "}",
            "",
            "myReader.Close();",
            "myCon.Close();",
        ],
        "description": ""
    },
    "array-sort-getenv": {
        "scope": "csharp",
        "prefix": "array-sort-getenv",
        "body": [
            "IDictionary env = Environment.GetEnvironmentVariables();",
            "",
            "// ****************************************",
            "// 配列とICollection",
            "// ****************************************",
            "ICollection col;",
            "",
            "col = env.Keys;",
            "string[] keys = new string[col.Count];",
            "",
            "col.CopyTo(keys, 0);",
            "",
            "// ****************************************",
            "// ソート",
            "// ****************************************",
            "Array.Sort (keys);",
            "",
            "// ****************************************",
            "// for",
            "// ****************************************",
            "for (int i = 0; i < keys.Length; i++)",
            "{",
            "    Console.WriteLine(\\$\"{keys[i]} => {env[keys[i]]}\");",
            "}",
            "",
            "// ****************************************",
            "// foreach",
            "// ****************************************",
            "foreach (string key in keys)",
            "{",
            "    Console.WriteLine(\\$\"{key} => {env[key]}\");",
            "}",
        ],
        "description": ""
    }
    "WriteBinaryData": {
        "scope": "csharp",
        "prefix": "WriteBinaryData",
        "body": [
            "private static void WriteBinaryData()",
            "{",
            "    using (var stream = File.Open(fileName, FileMode.Create))",
            "    {",
            "        using (var writer = new BinaryWriter(",
            "            stream, Encoding.UTF8, false))",
            "        {",
            "            writer.Write(1.250F);",
            "            writer.Write(@\"c:\\Temp\");",
            "            writer.Write(10);",
            "            writer.Write(true);",
            "        }",
            "    }",
            "}",
            "",
        ],
        "description": ""
    },
    "StreamReader": {
        "prefix": "StreamReader",
        "body": [
            "string filepath = @\"C:\\app\\workspace\\csv\\社員マスタ.csv\";",
            "",
            "Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);",
            "",
            "using( var sr = new StreamReader(filepath,Encoding.GetEncoding(\"shift_jis\")) ) {",
            "",
            "    string? line;",
            "    while ((line = sr.ReadLine()) != null)",
            "    {",
            "        Console.WriteLine(line);",
            "    }",
            "}",
            "",
        ],
        "description": ""
    },
}
